from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
import os

# –°—Ç–∞–Ω–∏
NAME, AGE, JOB, REASON, TIME, TELEGRAM = range(6)

ADMIN_ID = int(os.getenv("ADMIN_ID", 0))  # –¢–≤—ñ–π Telegram user ID –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç. –¢–∏ –ø–æ—Ç—Ä–∞–ø–∏–≤ —É ‚Äú–ë–µ–∑ –±—Ä–æ–Ω—ñ‚Äù ‚Äî –ø—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤, —è–∫—ñ —Ö–æ—á—É—Ç—å –≥–æ–≤–æ—Ä–∏—Ç–∏ —á–µ—Å–Ω–æ.\n\n"
        "–¶–µ –Ω–µ —Ç–µ—Ä–∞–ø—ñ—è. –ù–µ –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∏–π –∫–∞–Ω–∞–ª. –¶–µ ‚Äî –∂–∏–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç.\n"
        "–ú–∏ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–µ —á–æ–ª–æ–≤—ñ—á–µ –∫–æ–ª–æ –æ–Ω–ª–∞–π–Ω ‚Äî —ñ —Ç–∏ –º–æ–∂–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å.\n\n"
        "–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?"
    )
    return NAME

async def get_name(update, context):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")
    return AGE

async def get_age(update, context):
    context.user_data["age"] = update.message.text
    await update.message.reply_text("–ß–∏–º –∑–∞–π–º–∞—î—à—Å—è? (–ø—Ä–æ—Ñ–µ—Å—ñ—è/—Å—Ñ–µ—Ä–∞/—Ä–æ–ª—å)")
    return JOB

async def get_job(update, context):
    context.user_data["job"] = update.message.text
    await update.message.reply_text("–ß–æ–º—É —Ö–æ—á–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ —á–æ–ª–æ–≤—ñ—á–æ–≥–æ –∫–æ–ª–∞?")
    return REASON

async def get_reason(update, context):
    context.user_data["reason"] = update.message.text
    reply_keyboard = [["–í–µ—á—ñ—Ä –±—É–¥–Ω—ñ—Ö", "–í–∏—Ö—ñ–¥–Ω—ñ –≤–¥–µ–Ω—å"], ["–í–∏—Ö—ñ–¥–Ω—ñ –≤–≤–µ—á–µ—Ä—ñ", "–Ü–Ω—à–µ"]]
    await update.message.reply_text(
        "–ö–æ–ª–∏ —Ç–æ–±—ñ –∑—Ä—É—á–Ω–æ –ø—Ä–∏—î–¥–Ω—É–≤–∞—Ç–∏—Å—å? –û–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return TIME

async def get_time(update, context):
    context.user_data["time"] = update.message.text
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π Telegram –Ω—ñ–∫ (@...)")
    return TELEGRAM

async def get_telegram(update, context):
    context.user_data["telegram"] = update.message.text
    info = context.user_data
    summary = (
        f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ —É ¬´–ë–µ–∑ –±—Ä–æ–Ω—ñ¬ª:\n\n"
        f"üë§ –Ü–º‚Äô—è: {info['name']}\n"
        f"üìÖ –í—ñ–∫: {info['age']}\n"
        f"üíº –ó–∞–π–Ω—è—Ç—ñ—Å—Ç—å: {info['job']}\n"
        f"üó£ –ü—Ä–∏—á–∏–Ω–∞: {info['reason']}\n"
        f"‚è∞ –ó—Ä—É—á–Ω–∏–π —á–∞—Å: {info['time']}\n"
        f"üì± Telegram: {info['telegram']}"
    )
    if ADMIN_ID:
        await context.bot.send_message(chat_id=ADMIN_ID, text=summary)
    await update.message.reply_text("–î—è–∫—É—é. –ú–∏ –Ω–∞ –∑–≤'—è–∑–∫—É. –¢–∏ –Ω–µ –æ–¥–∏–Ω.")
    return ConversationHandler.END

async def cancel(update, context):
    await update.message.reply_text("–†–æ–∑–º–æ–≤–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –Ø–∫—â–æ —Ö–æ—á–µ—à ‚Äî –ø–æ—á–Ω–∏ —Å–ø–æ—á–∞—Ç–∫—É /start")
    return ConversationHandler.END

# –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏

async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /broadcast —Ç–µ–∫—Å—Ç_–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        return
    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º ‚Äî —Ç—É—Ç —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –±–∞–∑—É
    await update.message.reply_text(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {text}")

async def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("Error: BOT_TOKEN not set")
        return

    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            JOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_job)],
            REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_reason)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
            TELEGRAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_telegram)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("broadcast", admin_broadcast))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
